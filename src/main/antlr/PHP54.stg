group PHP54;

file(namespaces) ::= <<
<namespaces; separator="\n">
>>

namespace(name, body) ::= <<
namespace<if(name)> <name><endif><body>
>>

body(statements) ::= <<
{<if(statements)>

    <statements; separator="\n">

<endif>}
>>

useDeclarationList(useDeclarations) ::= <<
use <useDeclarations; separator=",">;
>>

useDeclaration(type, alias) ::= <<
<type> as <alias>
>>

class(modifier, identifier, ext, impl, body) ::= <<
<if(modifier)><modifier> <endif>class <identifier><if(ext)> <ext><endif><if(impl)> <impl><endif> <body>
>>

modifier(modifiers) ::=<<
<modifiers; separator=" ">
>>

extends(identifiers) ::=<<
<if(identifiers)>extends <identifiers; separator=","><endif>
>>

impl(identifiers) ::=<<
<if(identifiers)>implements <identifiers; separator=","><endif>
>>

const(identifiers) ::=<<
const <identifiers; separator=", ">;
>>

assign(id,value) ::=<<
<id> = <value>
>>

variableDeclarationList(modifier,identifiers) ::=<<
<if(modifier)><modifier> <endif><identifiers; separator=", ">;
>>

abstractMethod(modifier, identifier, params, primitiveCastings, castings, primitiveTypeChecks, body) ::=<<
<modifier> function <identifier>(<if(params)><params><endif>);
>>

method(modifier, identifier, params, primitiveCastings, castings, primitiveTypeChecks, body) ::=<<
<if(modifier)><modifier> <endif>function <identifier>(<if(params)><params><endif>) {<if(body)>

    <body; separator="\n">

<else>


<endif>}
>>

parameterList(declarations) ::=<<
<declarations; separator=", ">
>>

parameter(type,variableId,defaultValue) ::=<<
<if(type)><type> <endif><variableId><if(defaultValue)> = <defaultValue><endif>
>>

interface(modifier, identifier, ext, impl, body) ::= <<
interface <identifier><if(ext)> <ext><endif> <body>
>>

expression(expression) ::= <<
<if(expression)><expression>;<endif>
>>


return(expression) ::= <<
return<if(expression)> <expression><endif>;
>>

throw(expression) ::= <<
throw <expression>;
>>

echo(expressions) ::= <<
echo <expressions; separator=", ">;
>>

primitiveCasting(typeVariableId)::=<<
<if(!typeVariableId.isNullable)><typeVariableId.variableId> != null or \trigger_error('Argument <typeVariableId.variableId>'s type must be <typeVariableId.type>', \E_RECOVERABLE_ERROR);<endif>
<typeVariableId.variableId> = (<typeVariableId.type>) <typeVariableId.variableId>;
>>

casting(typeVariableId)::=<<
<typeVariableId.variableId> instanceof <typeVariableId.type> or \trigger_error('Argument <typeVariableIdst.variableId>'s type must be <typeVariableId.type>', \E_RECOVERABLE_ERROR);
>>

primitiveTypeCheck(typeVariableId)::=<<
<if(!typeVariableId.isNullable)><typeVariableId.variableId> != null && <endif>is_<typeVariableId.type>(<typeVariableId.variableId>) or \trigger_error('Argument <typeVariableId.variableId>'s type must be <typeVariableId.type>', \E_RECOVERABLE_ERROR);
>>

