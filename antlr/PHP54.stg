group PHP54;

file(namespaces) ::= <<
\<?php
<namespaces; separator="\n">
?\>
>>

namespace(name, body) ::= <<
namespace<if(name)> <name><endif><body>
>>

body(statements) ::= <<
{<if(statements)>

    <statements; separator="\n">

<endif>}
>>

useDeclarationList(useDeclarations) ::= <<
use <useDeclarations; separator=",">;
>>

useDeclaration(type, alias) ::= <<
<type> as <alias>
>>

class(modifier, identifier, ext, impl, body) ::= <<
<if(modifier)><modifier> <endif>class <identifier><if(ext)> <ext><endif><if(impl)> <impl><endif> <body>
>>

modifier(modifiers) ::=<<
<modifiers; separator=" ">
>>

extends(identifiers) ::=<<
<if(identifiers)>extends <identifiers; separator=","><endif>
>>

impl(identifiers) ::=<<
<if(identifiers)>implements <identifiers; separator=","><endif>
>>

const(identifiers) ::=<<
const <identifiers; separator=", ">;
>>

assign(id,value) ::=<<
<id> = <value>
>>

variableDeclarationList(modifier,identifiers) ::=<<
<if(modifier)><modifier> <endif><identifiers; separator=", ">;
>>

localVariableDeclarationList(variables) ::=<<
<variables; separator="\n">
>>

localVariableDeclaration(modifier, variableId, initValue) ::= <<
<if(modifier)><modifier> <endif><variableId><if(initValue)> = <initValue><endif>;
>>

abstractMethod(modifier, identifier, params, primitiveCastings, castings, primitiveTypeChecks, body) ::=<<
<modifier> function <identifier>(<if(params)><params><endif>);
>>

method(modifier, identifier, params, primitiveCastings, castings, primitiveTypeChecks, body) ::=<<
<if(modifier)><modifier> <endif>function <identifier>(<if(params)><params><endif>) {<if(body)>

    <body; separator="\n">

<else>


<endif>}
>>

parameterList(declarations) ::= <<
<declarations; separator=", ">
>>

parameter(type,variableId,defaultValue) ::=<<
<if(type)><type> <endif><variableId><if(defaultValue)> = <defaultValue><endif>
>>

interface(modifier, identifier, ext, impl, body) ::= <<
interface <identifier><if(ext)> <ext><endif> <body>
>>

if(condition, ifBlock, elseBlock) ::= <<
if (<condition>) {
    <ifBlock; separator="\n">
}<if(elseBlock)> else {
    <elseBlock; separator="\n">
}<endif>
>>

switch(condition, content) ::= <<
switch (<condition>) {
    <content; separator="\n">
}
>>

switchContent(labels, block) ::= <<
<labels; separator="\n">
    <block; separator="\n">
>>

caseLabel(label) ::= <<
case <label>:
>>

for(init, condition, update, block) ::= <<
for (<init> <condition> <update>) {
    <block; separator="\n">
}
>>

expressionList(expressions,semicolonAtTheEnd) ::= <<
<expressions; separator=", "><if(semicolonAtTheEnd)>;<endif>
>>

foreach(array, keyVariableId, valueVariableId, block) ::= <<
foreach (<array> as <if(keyVariableId)><keyVariableId> => <endif><valueVariableId>) {
    <block; separator="\n">
}
>>

while(condition, block) ::= <<
while (<condition>) {
    <block; separator="\n">
}
>>

doWhile(block, condition) ::= <<
do {
    <block; separator="\n">
} while(<condition>);
>>

tryCatch(tryBlock, catchBlocks) ::= <<
try {
    <tryBlock; separator="\n">
} <catchBlocks; separator=" ">
>>

catchBlock(type, variableId, block) ::= <<
catch (<type> <variableId>) {
    <block; separator="\n">
}
>>

expression(expression) ::= <<
<if(expression)><expression>;<endif>
>>

array(content) ::= <<
[<content; separator=", ">]
>>

unaryPreOperator(operator, expression) ::= <<
<operator><expression>
>>

unaryPostOperator(operator, expression) ::= <<
<expression><operator>
>>

operator(o) ::= "<o>"

binaryOperator(operator, left, right, needParentheses) ::= <<
<if(needParentheses)>(<endif><left> <operator> <right><if(needParentheses)>)<endif>
>>

ternaryOperator(cond, ifCase, elseCase, needParentheses) ::= <<
<if(needParentheses)>(<endif><cond> ? <ifCase> : <elseCase><if(needParentheses)>)<endif>
>>

instanceof(expression, type, needParentheses) ::= <<
<if(needParentheses)>(<endif><expression> instanceof <type><if(needParentheses)>)<endif>
>>

new(type, parameters) ::= <<
new <type>(<parameters; separator=", ">)
>>

clone(expression) ::= <<
clone <expression>
>>

functionCall(identifier, parameters) ::= <<
<identifier>(<parameters; separator=", ">)
>>

methodCall(callee, identifier, parameters) ::= <<
<callee>-><identifier>(<parameters; separator=", ">)
>>

methodCallStatic(callee, identifier, parameters) ::= <<
<callee>::<identifier>(<parameters; separator=", ">)
>>

classMemberAccessStatic(accessor, identifier) ::= <<
<accessor>::<identifier>
>>

classMemberAccess(expression, identifier) ::= <<
<expression>-><identifier>
>>

arrayAccess(expression, identifier) ::= <<
<expression>[<index>]
>>

postFixCall(expression, identifier, parameters) ::= <<
<expression>-><identifier>(<parameters; separator=", ">)
>>

exit(expression) ::= <<
exit<if(expression)>(<expression>)<endif>
>>

keyValue(key, value) ::= <<
<key> => <value>
>>

classConstant(accessor, constant) ::= <<
<accessor>::<constant>
>>

return(expression) ::= <<
return<if(expression)> <expression><endif>;
>>

throw(expression) ::= <<
throw <expression>;
>>

echo(expressions) ::= <<
echo <expressions; separator=", ">;
>>

break(index) ::= <<
break<if(index)> <index><endif>;
>>

continue(index) ::= <<
continue<if(index)> <index><endif>;
>>

primitiveCast(isNullable, type, expression)::=<<
<if(isNullable)>(<expression> !== null ? <endif>(<type>) <expression><if(isNullable)> : null)<endif>
>>

cast(type, expression)::=<<
(<expression> !== null ? (<expression> instanceof <type> ? <expression> : \trigger_error('Cast failed, the evaluation type of <expression> must be <type>', \E_RECOVERABLE_ERROR)) : null)
>>

castWithTempVariable(type, expression, tempVariableName)::=<<
((<tempVariableName> = <expression>) !== null ? (<tempVariableName> instanceof <type> ? <tempVariableName> : \trigger_error('Cast failed, the evaluation type of <expression> must be <type>', \E_RECOVERABLE_ERROR)) : null)
>>


